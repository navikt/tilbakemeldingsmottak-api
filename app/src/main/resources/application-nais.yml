spring:
  config:
    activate:
      on-profile: nais
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 10
      connection-timeout: 10000
      idle-timeout: 10001
      max-lifetime: 60001
      leak-detection-threshold: 60000
  flyway:
    enabled: true
    outOfOrder: false
    table: schema_version
    validateOnMigrate: false
  jpa:
    open-in-view: false
    properties:
      hibernate:
        event:
          merge:
            entity_copy_observer: allow
        generate_statistics: false
  main:
    banner-mode: 'off'
  transaction:
    default-timeout: 300s

  security:
    oauth2:
      resourceserver:
        jwt:
          # Spring Boot does not support auto-configuration with multiple issuers directly. Configured manually, see bean securityFilterChain.
      client:
        registration:
          pdl:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: ${PDL_SCOPE}
          arkiv:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope:  ${DOKARKIV_SCOPE}
          oppgave:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_JWK}
            authorization-grant-type: client_credentials
            scope: ${OPPGAVE_SCOPE}
          saf-maskintilmaskin:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_JWK}
            authorization-grant-type: client_credentials
            scope: ${SAF_SCOPE}

        provider:
          pdl:
            token-uri: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
          arkiv:
            token-uri: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
          oppgave:
            token-uri: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
          saf-maskintilmaskin:
            token-uri: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}

auth:
  issuers:
    azuread:
      issuer-uri: ${AZURE_APP_WELL_KNOWN_URL}
      jwk-set-uri: ${AZURE_APP_WELL_KNOWN_URL}
    tokenx:
      issuer-uri: ${TOKEN_X_CLIENT_ID}
      jwk-set-uri: ${TOKEN_X_WELL_KNOWN_URL}

hentdokument:
  url: ${SAF_HENTDOKUMENT_URL}

saf:
  graphql:
    url: ${SAF_URL}

graphql:
  endpoint:
    url: ${PDL_URL}

gcp_team_project_id: ${GCP_TEAM_PROJECT_ID}
big_query_dataset: ${BIG_QUERY_DATASET}

log_url: ${LOG_URL}

retry-config:
    send-mail:
        max-attempts: 5
        delay: 1000
        multiplier: 1.5

aad:
  authority: ${AAD_AUTHORITY}
  clientId:  ${AZURE_APP_CLIENT_ID}
  clientSecret:  ${AZURE_APP_CLIENT_SECRET}
  email: ${AAD_EMAIL}
  tenant: ${TENANT}

cron:
    deleteBigQueryServiceKlagerScheduled: "0 0 0 * * *" # midnight every day
    deleteServiceKlagerScheduled: "0 0 0 * * *" # midnight every day
    deleteBigQueryServiceKlagerOlderThan: 7 # days
    deleteServiceKlagerOlderThan: 90 # days (3 months)

no.nav.security.jwt:
  client:
    registration:
      arkiv:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${DOKARKIV_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

      saf-maskintilmaskin:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${SAF_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt

      oppgave:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${OPPGAVE_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt
      pdl:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${PDL_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

  issuer:
    azuread:
      accepted-audience: ${AZURE_APP_CLIENT_ID}
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
    tokenx:
      discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
      accepted_audience: ${TOKEN_X_CLIENT_ID}
