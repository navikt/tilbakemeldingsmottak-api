spring:
  config:
    activate:
      on-profile: nais
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 10
      connection-timeout: 10000
      idle-timeout: 10001
      max-lifetime: 60001
      leak-detection-threshold: 60000
  flyway:
    enabled: true
    out-of-order: false
    table: schema_version
    validate-on-migrate: false
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        event:
          merge:
            entity_copy_observer: allow
        generate_statistics: false
  main:
    banner-mode: 'off'
  transaction:
    default-timeout: 300s
  security:
    oauth2:
      client:
        registration:
          pdl:
            authorization-grant-type: client_credentials
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_CLIENT_SECRET}
            scope: ${PDL_SCOPE}
        provider:
          pdl:
            token-uri: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}

hentdokument:
  url: ${SAF_HENTDOKUMENT_URL}
saf:
  graphql:
    url: ${SAF_URL}
aad:
  authority: ${AAD_AUTHORITY}
  clientId:  ${AZURE_APP_CLIENT_ID}
  clientSecret:  ${AZURE_APP_CLIENT_SECRET}
  serviceuser: ${SERVICEUSER_EMAIL}
  password: ${SERVICEUSER_PASSWORD}
  tenant: ${TENANT}

no.nav.security.jwt:
  client:
    registration:
      arkiv:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${DOKARKIV_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

      saf-maskintilmaskin:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${SAF_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt

      oppgave:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${OPPGAVE_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt


  issuer:
    tokenx:
      discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
      accepted_audience: ${TOKEN_X_CLIENT_ID}
    azuread:
      accepted-audience: ${AZURE_APP_CLIENT_ID}
      cookie-name: azuread-idtoken
      discovery-url: ${AZURE_APP_WELL_KNOWN_URL}

# PDL
graphql:
  endpoint:
    url: ${PDL_URL}

