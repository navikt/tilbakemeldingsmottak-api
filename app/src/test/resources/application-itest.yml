Journalpost_v1_url: http://localhost:${wiremock.server.port}/OPPRETT_JOURNALPOST
email_from_address: srvtilbakemeldings@preprod.local
email_nav_support_address: nav-support@preprod.local
email_samisk_kontakt_address: samisk-kontakt@preprod.local
email_serviceklage_address: nav.serviceklager@preprod.local
email_uu_address: uu@preprod.local

# application.properties
logging.level.org.springframework.http.converter.json: DEBUG
logging.level.com.fasterxml.jackson.databind: DEBUG

ereg:
  api:
    url: http://localhost:${wiremock.server.port}/ereg
hentdokument:
  url: http://localhost:${wiremock.server.port}/hentdokument
management:
  metrics:
    export:
      prometheus:
        enabled: true

retry-config:
    send-mail:
        max-attempts: 3
        delay: 10
        multiplier: 2
aad:
  authority: https://localhost:${wiremock.server.port}/authority
  clientId: 1111199999
  clientSecret: secret
  email: dummy@dummy.com
  tenant: tenant

cron:
    deleteBigQueryServiceKlagerScheduled: "0 0 0 * * *" # midnight every day
    deleteServiceKlagerScheduled: "0 0 0 * * *" # midnight every day
    deleteBigQueryServiceKlagerOlderThan: 7 # days
    deleteServiceKlagerOlderThan: 90 # days (3 months)

no.nav.security:
  jwt:
    mock:
      enable: true
    client:
      registration:
        arkiv:
          token-endpoint-url: http://localhost:${token.server.port}/fake/token
          grant-type: client_credentials
          scope: scope
          authentication:
            client-id: fake
            client-secret: someSecret
            client-auth-method: client_secret_basic

        saf-maskintilmaskin:
          token-endpoint-url: http://localhost:${token.server.port}/fake/token
          grant-type: client_credentials
          scope: scope
          authentication:
            client-id: fake
            client-secret: someSecret
            client-auth-method: client_secret_basic

        oppgave:
          token-endpoint-url: http://localhost:${token.server.port}/fake/token
          grant-type: client_credentials
          scope: scope
          authentication:
            client-id: fake
            client-secret: someSecret
            client-auth-method: client_secret_basic

        pdl:
          token-endpoint-url: http://localhost:${token.server.port}/fake/token
          grant-type: client_credentials
          scope: scope
          authentication:
            client-id: fake
            client-secret: someSecret
            client-auth-method: client_secret_basic
    issuer:
      azuread:
        accepted-audience: aud-localhost
        discovery-url: http://localhost:${token.server.port}/azuread/.well-known/openid-configuration
      tokenx:
        accepted-audience: aud-localhost
        discovery-url: http://localhost:${token.server.port}/tokenx/.well-known/openid-configuration

norg2:
  api:
    v1:
      url: http://localhost:${wiremock.server.port}/norg2
oppgave_oppgaver_url: http://localhost:${wiremock.server.port}/OPPGAVE
saf:
  graphql:
    url: http://localhost:${wiremock.server.port}/safgraphql
pdl:
  url: http://localhost:${wiremock.server.port}/pdlgraphql
graphql:
  endpoint:
    url: ${pdl.url}

auth:
  issuers:
    azuread:
      issuer-uri: http://localhost:${token.server.port}/azuread
      accepted-audience: aud-localhost
      jwk-set-uri: http://localhost:${token.server.port}/azuread/.well-known/openid-configuration
    tokenx:
      issuer-uri: http://localhost:${token.server.port}/tokenx
      accepted-audience: aud-localhost
      jwk-set-uri: http://localhost:${token.server.port}/tokenx/.well-known/openid-configuration

spring:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  security:
    oauth2:
      resourceserver:
        jwt:
          # Spring Boot does not support auto-configuration with multiple issuers directly. Need to configure manually.
      client:
        registration:
          pdl:
            client-id: fake
            client-secret: someSecret
            provider: azuread
            authorization-grant-type: client_credentials
            scope: scope
          arkiv:
            client-id: fake
            client-secret: someSecret
            provider: azuread
            authorization-grant-type: client_credentials
            scope: scope
          oppgave:
            client-id: fake
            client-secret: someSecret
            provider: azuread
            authorization-grant-type: client_credentials
            scope: scope
          saf-maskintilmaskin:
            client-id: fake
            client-secret: someSecret
            provider: azuread
            authorization-grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
            client-authentication-method: private_key_jwt
            scope: scope

        provider:
          azuread:
            token-uri: http://localhost:${token.server.port}/fake/token
            #issuer-uri: http://localhost:${token.server.port}/azuread
          tokenx:
            token-uri: http://localhost:${token.server.port}/fake/token
            #issuer-uri: http://localhost:${token.server.port}/tokenx

token:
  server:
    port: ${mock-oauth2-server.port}

gcp_team_project_id: gcp-team-project-id
big_query_dataset: dataset
log_url: "https://logs.adeo.no"